name: pipeline
run-name: ${{ github.actor }} is running a new build.

on: [push, workflow_dispatch]

jobs:       
  Unit-Tests:
    if: startsWith(github.ref_name, 'master')
        || startsWith(github.ref_name, 'release/')  
        || startsWith(github.ref_name, 'develop')
        || startsWith(github.ref_name, 'feature/')
    runs-on: ubuntu-latest
    env:
      AWS_COGNITO_USER_POOL_ID: ${{ secrets.AWS_COGNITO_USER_POOL_ID }}    
      AWS_COGNITO_USER_POOL_ID64: ${{ secrets.AWS_COGNITO_USER_POOL_ID64 }}      
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Prepare JaCoCo Badge
        id: jacoco-prepare
        run: |
          mvn jacoco:prepare-agent
      
      - name: Test Execution 
        run: mvn test

      - name: Genarate JaCoCo Badge
        id: jacoco
        run: |
          mvn jacoco:report

      - name: Log coverage percentage
        run: |
            echo "Coverage = ${{ steps.jacoco.outputs.coverage }}"
            echo "Branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/
          
      - name: SonarCloud Scan
        run: |
          mvn sonar:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.host.url=https://sonarcloud.io -Dsonar.qualitygate.wait=true -Dsonar.sources=src/main          
                
  System-Tests:
    needs: Unit-Tests
    if: startsWith(github.ref_name, 'master')
        || startsWith(github.ref_name, 'release/')  
        || startsWith(github.ref_name, 'develop') 
        || startsWith(github.ref_name, 'feature/')   
    runs-on: ubuntu-latest
    env:
      AWS_COGNITO_USER_POOL_ID: ${{ secrets.AWS_COGNITO_USER_POOL_ID }}    
      AWS_COGNITO_USER_POOL_ID64: ${{ secrets.AWS_COGNITO_USER_POOL_ID64 }}      
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}	
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }} # location for the settings.xml file 

      - name: System Test 
        run: mvn test -Psystem-test

  Publish:
    needs: System-Tests
    if: startsWith(github.ref_name, 'master')
    runs-on: ubuntu-latest   
    outputs:
      version: ${{ steps.getVersion.outputs.VERSION }}
    steps:      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: getVersion
        run: |
            VERSION=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}		
          docker build -t rperisatto/$REPO_NAME:$VERSION .

      - name: Push Docker image
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}		
          docker push rperisatto/$REPO_NAME:$VERSION

  Deploy-PRD:
    if: startsWith(github.ref_name, 'master')
    needs: Publish
    runs-on: ubuntu-latest
    env:
      MYSQL_URL: '${{secrets.MYSQL_URL}}'
      MYSQL_PORT: '${{secrets.MYSQL_PORT}}'
      MYSQL_USER: '${{secrets.MYSQL_USER}}'
      MYSQL_PASSWORD: '${{secrets.MYSQL_PASSWORD}}'
      AWS_COGNITO_USER_POOL_ID64: ${{ secrets.AWS_COGNITO_USER_POOL_ID64 }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name vfc-cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy to EKS using Helm
        env:
          VERSION: '${{needs.Publish.outputs.VERSION}}'
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}		
          helm upgrade --install $REPO_NAME --set image.tag=$VERSION --set mysqlUrl=$MYSQL_URL --set mysqlPort=$MYSQL_PORT --set mysql_user=$MYSQL_USER \
          --set mysql_password=$MYSQL_PASSWORD --set aws_cognito_user_pool_id=$AWS_COGNITO_USER_POOL_ID64 --set aws_region=$AWS_REGION ./helm-chart